{"version":3,"sources":["logo.svg","App.js","reportWebVitals.js","i18n.js","index.js"],"names":["App","t","useTranslation","handleClick","lang","i18next","changeLanguage","className","style","width","padding","backgroundColor","onClick","src","logo","alt","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","options","order","lookupQuerystring","lookupCookie","lookupLocalStorage","lookupFromPathIndex","lookupFromSubdomainIndex","caches","excludeCacheFor","cookieMinutes","cookieDomain","htmlTag","document","documentElement","checkWhitelist","i18n","use","Backend","LanguageDetector","initReactI18next","init","fallbackLng","debug","whitelist","detection","interpolation","escapeValue","ReactDOM","render","fallback","StrictMode","getElementById"],"mappings":"+MAAe,G,MAAA,IAA0B,kC,8BCuC1BA,MAlCf,WAAgB,IACNC,EAAMC,cAAND,EACR,SAASE,EAAYC,GACnBC,IAAQC,eAAeF,GAEzB,OACE,sBAAKG,UAAU,MAAf,UACE,sBAAKC,MAAO,CAAEC,MAAM,OAAQC,QAAS,SAAUC,gBAAiB,QAAhE,UACE,wBAAQC,QAAS,kBAAIT,EAAY,OAAjC,qBAGA,wBAAQS,QAAS,kBAAIT,EAAY,OAAjC,qBAGA,wBAAQS,QAAS,kBAAIT,EAAY,OAAjC,mBAGA,wBAAQS,QAAS,kBAAIT,EAAY,OAAjC,oBAGA,wBAAQS,QAAS,kBAAIT,EAAY,QAAjC,wBAIF,yBAAQI,UAAU,aAAlB,UACE,qBAAKM,IAAKC,EAAMP,UAAU,WAAWQ,IAAI,SACzC,4BACE,6BAAKd,EAAE,uBCpBFe,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,O,uBCKRQ,EAAU,CAEdC,MAAO,CAAE,YAAa,UAAW,OAAQ,aAGzCC,kBAAmB,MACnBC,aAAc,UACdC,mBAAoB,aACpBC,oBAAqB,EACrBC,yBAA0B,EAG1BC,OAAQ,CAAC,eAAgB,UACzBC,gBAAiB,CAAC,UAGlBC,cAAe,GACfC,aAAc,WAGdC,QAASC,SAASC,gBAGlBC,gBAAgB,GAGlBC,IACGC,IAAIC,KAEJD,IAAIE,KAEJF,IAAIG,KAEJC,KAAK,CACJC,YAtCgB,CAAC,MAuCjBC,OAAO,EACPC,UAvCuB,CAAC,KAAM,KAAM,KAAK,KAAM,OAwC/CC,UAAWxB,EAEXyB,cAAe,CACbC,aAAa,KAIJX,EAAf,EC/CAY,IAASC,OACP,cAAC,WAAD,CAAUC,SAAW,0CAArB,SACE,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,QAIJlB,SAASmB,eAAe,SAM1BxC,M","file":"static/js/main.07c957e5.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport { useTranslation } from 'react-i18next';\nimport i18next from 'i18next';\nfunction App() {\n  const { t } = useTranslation();\n  function handleClick(lang){\n    i18next.changeLanguage(lang)\n  }\n  return (\n    <div className=\"App\">\n      <nav style={{ width:'100%', padding: '2rem 0', backgroundColor: 'grey'}}>\n        <button onClick={()=>handleClick('en')}>\n          English\n        </button>\n        <button onClick={()=>handleClick('be')}>\n          Bengali\n        </button>\n        <button onClick={()=>handleClick('hi')}>\n          Hindi\n        </button>\n        <button onClick={()=>handleClick('ko')}>\n          Korean\n        </button>\n        <button onClick={()=>handleClick('chi')}>\n          Chinese\n        </button>\n      </nav>\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          <h3>{t('Thanks.1')}</h3>\n        </p>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import i18n from 'i18next';\r\nimport { initReactI18next } from 'react-i18next';\r\n\r\nimport Backend from 'i18next-http-backend';\r\nimport LanguageDetector from 'i18next-browser-languagedetector';\r\n// don't want to use this?\r\n// have a look at the Quick start guide \r\n// for passing in lng and translations on init\r\nconst fallbackLng = ['en'];\r\nconst availableLanguages = ['en', 'be', 'hi','ko', 'chi'];\r\n\r\n\r\nconst options = {\r\n  // order and from where user language should be detected\r\n  order: [ 'navigator', 'htmlTag', 'path', 'subdomain'],\r\n\r\n  // keys or params to lookup language from\r\n  lookupQuerystring: 'lng',\r\n  lookupCookie: 'i18next',\r\n  lookupLocalStorage: 'i18nextLng',\r\n  lookupFromPathIndex: 0,\r\n  lookupFromSubdomainIndex: 0,\r\n\r\n  // cache user language on\r\n  caches: ['localStorage', 'cookie'],\r\n  excludeCacheFor: ['cimode'], // languages to not persist (cookie, localStorage)\r\n\r\n  // optional expire and domain for set cookie\r\n  cookieMinutes: 10,\r\n  cookieDomain: 'myDomain',\r\n\r\n  // optional htmlTag with lang attribute, the default is:\r\n  htmlTag: document.documentElement,\r\n\r\n  // only detect languages that are in the whitelist\r\n  checkWhitelist: true\r\n}\r\n\r\ni18n\r\n  .use(Backend) // load translation using xhr -> see /public/locales. We will add locales in the next step\r\n\r\n  .use(LanguageDetector) // detect user language\r\n\r\n  .use(initReactI18next) // pass the i18n instance to react-i18next.\r\n\r\n  .init({\r\n    fallbackLng, // if user computer language is not on the list of available languages, than we will be using the fallback language specified earlier\r\n    debug: true,\r\n    whitelist: availableLanguages,\r\n    detection: options,\r\n\r\n    interpolation: {\r\n      escapeValue: false\r\n    },\r\n  });\r\n\r\nexport default i18n;","import React, {Suspense} from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport './i18n';\n\n\n\nReactDOM.render(\n  <Suspense fallback={(<div>Loading</div>)}>\n    <React.StrictMode>\n      <App />\n  \n    </React.StrictMode>\n  </Suspense>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}